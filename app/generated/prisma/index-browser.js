
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  contact_number: 'contact_number',
  password: 'password',
  avatar: 'avatar',
  role: 'role',
  status: 'status',
  is_deleted: 'is_deleted',
  password_changed_at: 'password_changed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  model: 'model',
  brand_id: 'brand_id',
  size: 'size',
  color: 'color',
  tags: 'tags',
  product_code: 'product_code',
  warranty: 'warranty',
  stock: 'stock',
  price: 'price',
  discount_price: 'discount_price',
  thumbnail: 'thumbnail',
  gallery: 'gallery',
  description: 'description',
  specification: 'specification',
  additional_information: 'additional_information',
  key_features: 'key_features',
  video_url: 'video_url',
  is_published: 'is_published',
  is_featured: 'is_featured',
  is_deleted: 'is_deleted',
  created_at: 'created_at',
  updated_at: 'updated_at',
  categoryId: 'categoryId',
  campaignId: 'campaignId'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  code: 'code',
  icon: 'icon',
  description: 'description',
  featured: 'featured',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  code: 'code',
  icon: 'icon',
  featured: 'featured',
  description: 'description',
  parent_id: 'parent_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cart_id: 'cart_id',
  product_id: 'product_id',
  quantity: 'quantity'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  alt_text: 'alt_text',
  type: 'type',
  size: 'size',
  width: 'width',
  height: 'height',
  path: 'path',
  bucket_id: 'bucket_id',
  bucket_name: 'bucket_name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  contact_number: 'contact_number',
  secondary_contact_number: 'secondary_contact_number',
  email: 'email',
  address: 'address',
  postal_code: 'postal_code',
  city: 'city',
  district: 'district',
  country: 'country',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  user_id: 'user_id',
  address_id: 'address_id',
  payment_type: 'payment_type',
  delivery_method: 'delivery_method',
  order_status: 'order_status',
  payment_status: 'payment_status',
  delivery_charge: 'delivery_charge',
  discount_amount: 'discount_amount',
  sub_amount: 'sub_amount',
  total_amount: 'total_amount',
  tax: 'tax',
  percentage_of_tax: 'percentage_of_tax',
  coupon_id: 'coupon_id',
  comment: 'comment',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  product_id: 'product_id',
  quantity: 'quantity',
  price: 'price'
};

exports.Prisma.OrderHistoryScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  order_id: 'order_id',
  status: 'status',
  remark: 'remark',
  created_at: 'created_at'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  amount: 'amount',
  gateway: 'gateway',
  status: 'status',
  transaction_id: 'transaction_id',
  paid_at: 'paid_at',
  error_message: 'error_message',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RefundScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  paid_amount: 'paid_amount',
  refund_amount: 'refund_amount',
  penalty_charge: 'penalty_charge',
  reason: 'reason',
  refunded_at: 'refunded_at'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  product_id: 'product_id',
  rating: 'rating',
  comment: 'comment',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  discount_type: 'discount_type',
  discount_value: 'discount_value',
  maximum_value: 'maximum_value',
  start_date: 'start_date',
  expiration_date: 'expiration_date',
  usage_limit: 'usage_limit',
  per_user_limit: 'per_user_limit',
  min_order_amount: 'min_order_amount',
  is_active: 'is_active',
  used_count: 'used_count',
  beneficiary_type: 'beneficiary_type',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CourierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  contact_number: 'contact_number',
  email: 'email',
  created_at: 'created_at'
};

exports.Prisma.ShippedInfoScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  courier_id: 'courier_id',
  tracking_id: 'tracking_id',
  created_at: 'created_at'
};

exports.Prisma.UserOTPScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  contact_number: 'contact_number',
  otp: 'otp',
  expires_at: 'expires_at',
  created_at: 'created_at'
};

exports.Prisma.ProductAttributeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  status: 'status',
  category_id: 'category_id'
};

exports.Prisma.AttributeValueScalarFieldEnum = {
  id: 'id',
  attribute_id: 'attribute_id',
  title: 'title',
  position: 'position'
};

exports.Prisma.ProductMetaScalarFieldEnum = {
  id: 'id',
  type: 'type',
  value: 'value'
};

exports.Prisma.MenuScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  menu_id: 'menu_id',
  category_id: 'category_id',
  brand_id: 'brand_id',
  position: 'position',
  parent_id: 'parent_id'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  product_id: 'product_id',
  created_at: 'created_at'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  sub_title: 'sub_title',
  description: 'description',
  thumbnail: 'thumbnail',
  start_at: 'start_at',
  end_at: 'end_at',
  platform: 'platform',
  conditions: 'conditions',
  note: 'note',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.QnAScalarFieldEnum = {
  id: 'id',
  inquirer_id: 'inquirer_id',
  product_id: 'product_id',
  question: 'question',
  answer: 'answer',
  is_approved: 'is_approved',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  CUSTOMER: 'CUSTOMER'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BLOCKED: 'BLOCKED'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  CASH_ON_DELIVERY: 'CASH_ON_DELIVERY',
  ONLINE_PAYMENT: 'ONLINE_PAYMENT'
};

exports.DeliveryMethod = exports.$Enums.DeliveryMethod = {
  STORE_PICKUP: 'STORE_PICKUP',
  HOME_DELIVERY: 'HOME_DELIVERY'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  DUE: 'DUE',
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentGateway = exports.$Enums.PaymentGateway = {
  STRIPE: 'STRIPE',
  BANK: 'BANK',
  CASH: 'CASH'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  AMOUNT: 'AMOUNT'
};

exports.BeneficiaryType = exports.$Enums.BeneficiaryType = {
  NEW_USER: 'NEW_USER',
  EXISTING_USER: 'EXISTING_USER',
  ALL: 'ALL'
};

exports.AttributeType = exports.$Enums.AttributeType = {
  SINGLE_SELECT: 'SINGLE_SELECT',
  MULTIPLE_SELECT: 'MULTIPLE_SELECT'
};

exports.AttributeStatus = exports.$Enums.AttributeStatus = {
  PUBLISHED: 'PUBLISHED',
  DRAFT: 'DRAFT'
};

exports.ProductMetaType = exports.$Enums.ProductMetaType = {
  WARRANTY: 'WARRANTY',
  TAG: 'TAG'
};

exports.CampaignPlatform = exports.$Enums.CampaignPlatform = {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  ALL: 'ALL'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  ACTIVE: 'ACTIVE',
  UPCOMING: 'UPCOMING',
  CLOSED: 'CLOSED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Product: 'Product',
  Brand: 'Brand',
  Category: 'Category',
  Cart: 'Cart',
  CartItem: 'CartItem',
  File: 'File',
  Address: 'Address',
  Order: 'Order',
  OrderItem: 'OrderItem',
  OrderHistory: 'OrderHistory',
  Payment: 'Payment',
  Refund: 'Refund',
  Review: 'Review',
  Coupon: 'Coupon',
  Courier: 'Courier',
  ShippedInfo: 'ShippedInfo',
  UserOTP: 'UserOTP',
  ProductAttribute: 'ProductAttribute',
  AttributeValue: 'AttributeValue',
  ProductMeta: 'ProductMeta',
  Menu: 'Menu',
  MenuItem: 'MenuItem',
  Wishlist: 'Wishlist',
  Campaign: 'Campaign',
  QnA: 'QnA'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
