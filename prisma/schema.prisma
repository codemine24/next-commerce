generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  first_name          String
  last_name           String?
  email               String     @unique
  contact_number      String?
  password            String
  avatar              String?
  role                UserRole   @default(CUSTOMER)
  status              UserStatus @default(ACTIVE)
  is_deleted          Boolean    @default(false)
  password_changed_at DateTime?
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  files               File[]
  cart                Cart?

  @@map("users")
}

model Product {
  id                     String   @id @default(uuid())
  name                   String   @unique
  slug                   String   @unique
  model                  String?
  brand_id               String?
  size                   String?
  color                  String?
  tags                   String[] @default([])
  product_code           String?  @unique
  warranty               String?
  stock                  Int      @default(0)
  price                  Float
  discount_price         Float?
  thumbnail              String?
  gallery                String[] @default([])
  description            String? //html
  specification          String? //html
  additional_information String? //html
  key_features           String[] @default([])
  video_url              String?
  is_published           Boolean  @default(true)
  is_featured            Boolean  @default(false)
  is_deleted             Boolean  @default(false)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  brand      Brand?     @relation(fields: [brand_id], references: [id])
  categories Category[] @relation("ProductCategories")
  categoryId String?
  cart_item  CartItem[]

  @@map("products")
}

model Brand {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  code        String?  @unique
  icon        String?
  description String?
  featured    Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  products Product[]

  @@map("brands")
}

model Category {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  code        String?  @unique
  icon        String?
  featured    Boolean  @default(false)
  description String?
  parent_id   String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  parent   Category?  @relation("CategoryToParent", fields: [parent_id], references: [id])
  children Category[] @relation("CategoryToParent")
  products Product[]  @relation("ProductCategories")

  @@map("categories")
}

model Cart {
  id         String   @id @default(uuid())
  user_id    String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cart_items CartItem[]
  user       User       @relation(fields: [user_id], references: [id])

  @@map("carts")
}

model CartItem {
  id         String @id @default(uuid())
  cart_id    String
  product_id String
  quantity   Int    @default(1)
  price      Int

  cart    Cart    @relation(fields: [cart_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@unique([cart_id, product_id], name: "cart_id_product_id")
  @@map("cart_items")
}

model File {
  id          String   @id @default(uuid())
  user_id     String?
  name        String
  alt_text    String
  type        String
  size        Int
  width       Int
  height      Int
  path        String
  bucket_id   String
  bucket_name String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  uploaded_by User? @relation(fields: [user_id], references: [id])

  @@map("images")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}
